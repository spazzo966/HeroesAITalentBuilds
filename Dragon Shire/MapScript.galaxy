//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Dragon Shire
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCore_InitLib();
    libGame_InitLib();
    libMapM_InitLib();
    libAIAI_InitLib();
    libUIUI_InitLib();
    libStEx_InitLib();
    libSond_InitLib();
    libGDHL_InitLib();
    libSprt_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_glowingRockCountMax_C = 24;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_GlowingRock {
    actor[libCore_gv_bALMaxTeams + 1] lv_rockDoodads;
    region lv_searchRegion;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
gs_GlowingRock[gv_glowingRockCountMax_C + 1] gv_glowingRocks;
int gv_glowingRockCount;

void InitGlobals () {
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_InitializeGlowingRock (doodad lp_orderDoodad, doodad lp_chaosDoodad, region lp_searchArea);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeMap;
trigger gt_InitializeMapMechanic;
trigger gt_InitializeTribute;
trigger gt_InitializeGlobalVariables;
trigger gt_InitializeJungleCreepData;
trigger gt_InitializeLaneData;
trigger gt_InitializeTownData;
trigger gt_InitializeRegionData;
trigger gt_PlayerEntersVehicle;
trigger gt_PlayerLeavesVehicle;
trigger gt_PeriodicallyMakeRocksGlow;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_InitializeGlowingRock (doodad lp_orderDoodad, doodad lp_chaosDoodad, region lp_searchArea) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_glowingRockCount >= gv_glowingRockCountMax_C)) {
        TextExpressionSetToken("Param/Expression/66FE7555", "A", IntToText(gv_glowingRockCountMax_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/66FE7555"), true);
        return ;
    }

    gv_glowingRockCount += 1;
    gv_glowingRocks[gv_glowingRockCount].lv_rockDoodads[libGame_gv_teamOrderIndex_C] = ActorFromDoodad(lp_orderDoodad);
    gv_glowingRocks[gv_glowingRockCount].lv_rockDoodads[libGame_gv_teamChaosIndex_C] = ActorFromDoodad(lp_chaosDoodad);
    gv_glowingRocks[gv_glowingRockCount].lv_searchRegion = lp_searchArea;
    ActorSend(gv_glowingRocks[gv_glowingRockCount].lv_rockDoodads[libGame_gv_teamOrderIndex_C], "Signal HiddenFromChaos");
    ActorSend(gv_glowingRocks[gv_glowingRockCount].lv_rockDoodads[libGame_gv_teamChaosIndex_C], "Signal HiddenFromOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAIAI_gt_IncludeAI, true, false);
    TriggerExecute(libGame_gt_IncludeGame, true, false);
    TriggerExecute(libGDHL_gt_IncludeGameDataHelper, true, false);
    TriggerExecute(libMapM_gt_IncludeMapMechanics, true, false);
    TriggerExecute(libStEx_gt_IncludeStartingExperience, true, false);
    TriggerExecute(libSond_gt_IncludeSound, true, false);
    TriggerExecute(libSprt_gt_IncludeSupport, true, false);
    TriggerExecute(libUIUI_gt_IncludeUI, true, false);
    TriggerExecute(gt_InitializeGlobalVariables, true, true);
    TriggerExecute(gt_InitializeLaneData, true, true);
    TriggerExecute(gt_InitializeJungleCreepData, true, true);
    TriggerExecute(gt_InitializeTownData, true, true);
    TriggerExecute(gt_InitializeRegionData, true, true);
    libMapM_gf_MapMechanicAdd(libMapM_gv_mMGardensDragonMechanicName_C, gt_InitializeMapMechanic);
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSJungleCreepCamps = true;
    libCore_gv_sYSJungleWatchTowers = true;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSMinionAI = true;
    TriggerExecute(libCore_gt_InitializeStormMod, true, true);
    TriggerExecute(gt_InitializeTribute, true, true);
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(PlayerGroupAll(), "LadyofThorns");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Storm_Doodad_DS19_Embers");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Storm_Doodad_DS19_DragonFog");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMap_Init () {
    gt_InitializeMap = TriggerCreate("gt_InitializeMap_Func");
    TriggerAddEventMapInit(gt_InitializeMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map Mechanic
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMapMechanic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMGardensDragonInitTowers(UnitFromId(38), UnitFromId(397));
    gf_InitializeGlowingRock(DoodadFromId(1524150757), DoodadFromId(293021596), RegionFromId(16));
    gf_InitializeGlowingRock(DoodadFromId(1187686044), DoodadFromId(437613679), RegionFromId(18));
    gf_InitializeGlowingRock(DoodadFromId(1467907379), DoodadFromId(2079385535), RegionFromId(19));
    gf_InitializeGlowingRock(DoodadFromId(554069253), DoodadFromId(572313783), RegionFromId(20));
    gf_InitializeGlowingRock(DoodadFromId(1530607468), DoodadFromId(253543304), RegionFromId(23));
    gf_InitializeGlowingRock(DoodadFromId(1107827036), DoodadFromId(63608956), RegionFromId(26));
    gf_InitializeGlowingRock(DoodadFromId(1194436926), DoodadFromId(1941804518), RegionFromId(27));
    gf_InitializeGlowingRock(DoodadFromId(325242379), DoodadFromId(2125448265), RegionFromId(28));
    gf_InitializeGlowingRock(DoodadFromId(580532599), DoodadFromId(1626511782), RegionFromId(29));
    gf_InitializeGlowingRock(DoodadFromId(1059352473), DoodadFromId(439700415), RegionFromId(31));
    gf_InitializeGlowingRock(DoodadFromId(924734334), DoodadFromId(2044046412), RegionFromId(32));
    gf_InitializeGlowingRock(DoodadFromId(177646977), DoodadFromId(1706242716), RegionFromId(33));
    gf_InitializeGlowingRock(DoodadFromId(315755638), DoodadFromId(2110501447), RegionFromId(34));
    gf_InitializeGlowingRock(DoodadFromId(870592109), DoodadFromId(102283045), RegionFromId(35));
    gf_InitializeGlowingRock(DoodadFromId(1842609077), DoodadFromId(1828292314), RegionFromId(36));
    gf_InitializeGlowingRock(DoodadFromId(1363276434), DoodadFromId(1499930744), RegionFromId(37));
    gf_InitializeGlowingRock(DoodadFromId(1428498514), DoodadFromId(691198668), RegionFromId(38));
    gf_InitializeGlowingRock(DoodadFromId(1287485761), DoodadFromId(2020425807), RegionFromId(39));
    gf_InitializeGlowingRock(DoodadFromId(546536717), DoodadFromId(169807408), RegionFromId(40));
    gf_InitializeGlowingRock(DoodadFromId(1637951221), DoodadFromId(569354797), RegionFromId(41));
    gf_InitializeGlowingRock(DoodadFromId(229372219), DoodadFromId(1761831411), RegionFromId(42));
    gf_InitializeGlowingRock(DoodadFromId(569393868), DoodadFromId(1855794078), RegionFromId(43));
    gf_InitializeGlowingRock(DoodadFromId(618627175), DoodadFromId(733577639), RegionFromId(44));
    gf_InitializeGlowingRock(DoodadFromId(1328376423), DoodadFromId(691154724), RegionFromId(45));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMapMechanic_Init () {
    gt_InitializeMapMechanic = TriggerCreate("gt_InitializeMapMechanic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Tribute
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTribute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tribUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tribUnit = UnitFromId(1441536957);
    UnitSetInfoTip(lv_tribUnit, StringExternal("Param/Value/92577B84"));
    UnitSetState(lv_tribUnit, c_unitStateTooltipable, true);
    UnitSetState(lv_tribUnit, c_unitStateHighlightable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeTribute_Init () {
    gt_InitializeTribute = TriggerCreate("gt_InitializeTribute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Global Variables
//--------------------------------------------------------------------------------------------------
bool gt_InitializeGlobalVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapStringID = "DragonShire";
    libCore_gv_mAPMapImage = "CustomMiniMap.tga";
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core = UnitFromId(210);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core = UnitFromId(346);
    libCore_gv_mAPOrderBaseRegion = RegionFromId(5);
    libCore_gv_mAPChaosBaseRegion = RegionFromId(1);
    libCore_gv_mAPMapSoundtrack[0] = "MX_Dragonshire_Intro";
    libCore_gv_mAPMapSoundtrack[1] = "MX_Dragonshire_LVL_1";
    libCore_gv_mAPMapSoundtrack[2] = "MX_Dragonshire_LVL_10";
    libCore_gv_mAPMapSoundtrack[3] = "MX_Dragonshire_LVL_20";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeGlobalVariables_Init () {
    gt_InitializeGlobalVariables = TriggerCreate("gt_InitializeGlobalVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Jungle Creep Data
//--------------------------------------------------------------------------------------------------
bool gt_InitializeJungleCreepData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_junglecamp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(244);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(242);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(248);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(8);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(37);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(34);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Knights;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(252);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(254);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(256);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(250);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[4] = PointFromId(2072);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(9);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Ogres;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(168);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(168);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(245);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(249);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(247);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(10);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(20);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(17);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Knights;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(253);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(255);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(257);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(251);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[4] = PointFromId(2071);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(14);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Ogres;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(53);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(53);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Knights;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(178);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(177);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(180);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(1321);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[4] = PointFromId(1334);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(24);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Ogres;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(15);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(112);
    libMapM_gv_jungleNumberOfCreepCamps = lv_junglecamp;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeJungleCreepData_Init () {
    gt_InitializeJungleCreepData = TriggerCreate("gt_InitializeJungleCreepData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Lane Data
//--------------------------------------------------------------------------------------------------
bool gt_InitializeLaneData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureCount;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/55B57A74");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Top;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(540);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(579);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(166);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(580);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(383);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(168);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(171);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(581);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(384);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(66);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(369);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(582);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(170);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(53);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(370);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(169);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(167);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(78);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(80);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/3D4242A8");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Bottom;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(536);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(822);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(823);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(824);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(825);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(34);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(37);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(112);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(542);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(14);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(15);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(17);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(20);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(30);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(31);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(39);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(91);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(95);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/EAB18292");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Middle;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(608);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(610);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(612);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(614);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(616);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(618);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(619);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(617);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(615);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(613);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(611);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(609);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeLaneData_Init () {
    gt_InitializeLaneData = TriggerCreate("gt_InitializeLaneData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Town Data
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_town;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(2);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(4);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(12);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(13);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(7);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(11);
    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(17);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(21);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(30);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(22);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(15);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(25);
    libGame_gv_townTownCount = lv_town;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeTownData_Init () {
    gt_InitializeTownData = TriggerCreate("gt_InitializeTownData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Region Data
//--------------------------------------------------------------------------------------------------
bool gt_InitializeRegionData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamOrderIndex_C, RegionFromId(6), PointFromId(199), PointFromId(731), PointFromId(794), null);
    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamChaosIndex_C, RegionFromId(3), PointFromId(97), PointFromId(201), PointFromId(205), null);
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamOrderIndex_C, RegionFromId(6));
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamChaosIndex_C, RegionFromId(3));
    libMapM_gv_mMGardensDragonSpawnPoint = PointFromId(1306212500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeRegionData_Init () {
    gt_InitializeRegionData = TriggerCreate("gt_InitializeRegionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Vehicle
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersVehicle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UpdateUpgradesForPlayer(libGame_gf_ComputerPlayerInTeam(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(libGame_gf_UseVehiclePassengerHero()))), libGame_gf_UseVehicleVehicleUnit(), libGame_gv_scalingTicks);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "Storm_Doodad_DS19_Embers");
    libCore_gf_SendActorMessageToDoodadsInRegion("ModelSwap Storm_Doodad_DS19_Streetlamp_On", RegionEntireMap(), "Storm_Doodad_DS19_Streetlamp");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "Storm_Doodad_DS19_DragonFog");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersVehicle_Init () {
    gt_PlayerEntersVehicle = TriggerCreate("gt_PlayerEntersVehicle_Func");
    libGame_gf_HeroEnteredVehicleInstant(gt_PlayerEntersVehicle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Vehicle
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesVehicle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Storm_Doodad_DS19_Embers");
    libCore_gf_SendActorMessageToDoodadsInRegion("ModelSwap Storm_Doodad_DS19_Streetlamp", RegionEntireMap(), "Storm_Doodad_DS19_Streetlamp");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Storm_Doodad_DS19_DragonFog");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesVehicle_Init () {
    gt_PlayerLeavesVehicle = TriggerCreate("gt_PlayerLeavesVehicle_Func");
    libGame_gf_UnitStopsOccupyingVehicleInstant(gt_PlayerLeavesVehicle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodically Make Rocks Glow
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicallyMakeRocksGlow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rock;
    int lv_team;
    int lv_nearbyHeroCount;

    // Automatic Variable Declarations
    int auto26659EDF_ae;
    const int auto26659EDF_ai = 1;
    const int auto204CCE3D_ae = libCore_gv_bALMaxTeams;
    const int auto204CCE3D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto26659EDF_ae = gv_glowingRockCount;
    lv_rock = 1;
    for ( ; ( (auto26659EDF_ai >= 0 && lv_rock <= auto26659EDF_ae) || (auto26659EDF_ai < 0 && lv_rock >= auto26659EDF_ae) ) ; lv_rock += auto26659EDF_ai ) {
        lv_team = 1;
        for ( ; ( (auto204CCE3D_ai >= 0 && lv_team <= auto204CCE3D_ae) || (auto204CCE3D_ai < 0 && lv_team >= auto204CCE3D_ae) ) ; lv_team += auto204CCE3D_ai ) {
            lv_nearbyHeroCount = UnitGroupCount(UnitGroupAlliance(libGame_gf_ComputerPlayerInTeam(lv_team), c_unitAllianceAlly, gv_glowingRocks[lv_rock].lv_searchRegion, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
            if ((lv_nearbyHeroCount > 0)) {
                ActorSend(gv_glowingRocks[lv_rock].lv_rockDoodads[lv_team], "Signal StartGlowing");
            }
            else {
                ActorSend(gv_glowingRocks[lv_rock].lv_rockDoodads[lv_team], "Signal StopGlowing");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicallyMakeRocksGlow_Init () {
    gt_PeriodicallyMakeRocksGlow = TriggerCreate("gt_PeriodicallyMakeRocksGlow_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicallyMakeRocksGlow, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeMap_Init();
    gt_InitializeMapMechanic_Init();
    gt_InitializeTribute_Init();
    gt_InitializeGlobalVariables_Init();
    gt_InitializeJungleCreepData_Init();
    gt_InitializeLaneData_Init();
    gt_InitializeTownData_Init();
    gt_InitializeRegionData_Init();
    gt_PlayerEntersVehicle_Init();
    gt_PlayerLeavesVehicle_Init();
    gt_PeriodicallyMakeRocksGlow_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
