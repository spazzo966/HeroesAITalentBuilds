//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Infernal Shrines
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"
include "LibMLHH"
include "LibMSHE"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCore_InitLib();
    libGame_InitLib();
    libMapM_InitLib();
    libAIAI_InitLib();
    libUIUI_InitLib();
    libStEx_InitLib();
    libSond_InitLib();
    libGDHL_InitLib();
    libSprt_InitLib();
    libMLHH_InitLib();
    libMSHE_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
timer[3] gv_demonChainsTimer;
timer[3] gv_demonBaseTimer;
timer[3] gv_demonChainsResetTimer;
timer[3] gv_demonBaseResetTimer;
bool[3] gv_demonChainsResetting;
bool[3] gv_demonBaseResetting;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_demonChainsTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_demonBaseTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_demonChainsResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_demonBaseResetTimer[init_i] = TimerCreate();
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeMap;
trigger gt_InitializeMapMechanic;
trigger gt_MapMechanicIntroCallback;
trigger gt_HookupGlobalVariables;
trigger gt_HookupLaneData;
trigger gt_HookupJungleCreepData;
trigger gt_HookupTownData;
trigger gt_HookupRegionData;
trigger gt_CreateGiantDemons;
trigger gt_DemonLookatandReaction;
trigger gt_DemonTimerExpired;
trigger gt_DemonResetTimerExpired;

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAIAI_gt_IncludeAI, true, false);
    TriggerExecute(libGame_gt_IncludeGame, true, false);
    TriggerExecute(libGDHL_gt_IncludeGameDataHelper, true, false);
    TriggerExecute(libMapM_gt_IncludeMapMechanics, true, false);
    TriggerExecute(libStEx_gt_IncludeStartingExperience, true, false);
    TriggerExecute(libSond_gt_IncludeSound, true, false);
    TriggerExecute(libSprt_gt_IncludeSupport, true, false);
    TriggerExecute(libUIUI_gt_IncludeUI, true, false);
    TriggerExecute(libMLHH_gt_IncludeHH, true, true);
    TriggerExecute(gt_HookupGlobalVariables, true, true);
    TriggerExecute(gt_HookupLaneData, true, true);
    TriggerExecute(gt_HookupJungleCreepData, true, true);
    TriggerExecute(gt_HookupTownData, true, true);
    TriggerExecute(gt_HookupRegionData, true, true);
    libMapM_gf_MapMechanicAdd(libMSHE_gv_mMISMechanicName_C, gt_InitializeMapMechanic);
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSJungleCreepCamps = true;
    libCore_gv_sYSJungleWatchTowers = true;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSMinionAI = true;
    TriggerExecute(libCore_gt_InitializeStormMod, true, true);
    TriggerExecute(gt_CreateGiantDemons, true, false);
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "Angel");
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "Angel");
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "Demon");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMap_Init () {
    gt_InitializeMap = TriggerCreate("gt_InitializeMap_Func");
    TriggerAddEventMapInit(gt_InitializeMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map Mechanic
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMapMechanic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMSHE_gf_MMISMapData(PointFromId(23), UnitFromId(25), UnitFromId(22), UnitFromId(29), RegionFromId(19), RegionFromId(18), RegionFromId(16));
    libStEx_gf_SetMapMechanicTutorialCallback(gt_MapMechanicIntroCallback);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMapMechanic_Init () {
    gt_InitializeMapMechanic = TriggerCreate("gt_InitializeMapMechanic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Intro Callback
//--------------------------------------------------------------------------------------------------
bool gt_MapMechanicIntroCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(UnitFromId(13), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(13)), "AliasAdd cine_scene04_tower_north");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(16), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(16)), "AliasAdd cine_Scene04_Tower_South");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(19), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(19)), "AliasAdd cine_Scene04_Gate");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(25), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(25)), "AliasAdd cine_s03_shrine");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(24), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(24)), "AliasAdd cine_Scene04_Moonwell");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(210), "ExternalFinderAdd");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(210)), "AliasAdd cine_Scene01_HeavenCore");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapMechanicIntroCallback_Init () {
    gt_MapMechanicIntroCallback = TriggerCreate("gt_MapMechanicIntroCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Global Variables
//--------------------------------------------------------------------------------------------------
bool gt_HookupGlobalVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapStringID = "Shrines";
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core = UnitFromId(210);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core = UnitFromId(346);
    libCore_gv_mAPOrderBaseRegion = RegionFromId(1);
    libCore_gv_mAPChaosBaseRegion = RegionFromId(5);
    libCore_gv_mAPMapSoundtrack[0] = "MX_Shrines_Intro";
    libCore_gv_mAPMapSoundtrack[1] = "MX_Shrines_LVL_1";
    libCore_gv_mAPMapSoundtrack[2] = "MX_Shrines_LVL_10";
    libCore_gv_mAPMapSoundtrack[3] = "MX_Shrines_LVL_20";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupGlobalVariables_Init () {
    gt_HookupGlobalVariables = TriggerCreate("gt_HookupGlobalVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Lane Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupLaneData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureCount;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/55B57A74");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Top;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(540);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(579);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(166);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(580);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(383);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(168);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(171);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(581);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(384);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(66);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(369);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(582);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(170);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(53);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(370);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(169);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(167);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(78);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(80);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/3D4242A8");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Bottom;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(536);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(822);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(823);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(824);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(825);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(34);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(37);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(112);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(542);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(14);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(15);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(17);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(20);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(30);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(31);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(39);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(91);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(95);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/EAB18292");
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneNamePreset = libGame_ge_LaneNamePresets_Middle;
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2245);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(608);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(610);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(612);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(614);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(616);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(749);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(618);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(619);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(838);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(617);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(615);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(613);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(611);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(609);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2246);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupLaneData_Init () {
    gt_HookupLaneData = TriggerCreate("gt_HookupLaneData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Jungle Creep Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupJungleCreepData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_junglecamp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCapturePointSplatModel = "MercCampCaptureBeaconHeaven";
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(244);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(242);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(248);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(1225);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(8);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersHaveStaggeredBirth = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersStaggeredBirthPeriod = 0.25;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(749);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(749);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_BruiserCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCapturePointSplatModel = "MercCampCaptureBeaconHeaven";
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(252);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(254);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(256);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(250);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(9);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_BruiserCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(168);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(168);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCapturePointSplatModel = "MercCampCaptureBeaconHell";
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(245);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(249);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(247);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(1227);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(10);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersHaveStaggeredBirth = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersStaggeredBirthPeriod = 0.25;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(838);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(838);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_BruiserCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCapturePointSplatModel = "MercCampCaptureBeaconHell";
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(253);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(255);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(257);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(251);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(14);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_BruiserCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(53);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(53);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCapturePointSplatModel = "MercCampCaptureBeaconHeaven";
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(178);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(177);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(180);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(1321);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(24);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersHaveStaggeredBirth = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_defenderDefendersStaggeredBirthPeriod = 0.25;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeCamp1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(14);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(542);
    libMapM_gv_jungleNumberOfCreepCamps = lv_junglecamp;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupJungleCreepData_Init () {
    gt_HookupJungleCreepData = TriggerCreate("gt_HookupJungleCreepData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Town Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_town;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(2);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(4);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(12);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(13);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(7);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(11);
    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(17);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(21);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(30);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(22);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(15);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(25);
    libGame_gv_townTownCount = lv_town;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupTownData_Init () {
    gt_HookupTownData = TriggerCreate("gt_HookupTownData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Region Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupRegionData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamOrderIndex_C, RegionFromId(20), PointFromId(353), PointFromId(351), PointFromId(349), null);
    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamChaosIndex_C, RegionFromId(23), PointFromId(1132), PointFromId(161), PointFromId(159), null);
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamOrderIndex_C, RegionFromId(20));
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamChaosIndex_C, RegionFromId(23));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupRegionData_Init () {
    gt_HookupRegionData = TriggerCreate("gt_HookupRegionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Giant Demons
//--------------------------------------------------------------------------------------------------
bool gt_CreateGiantDemons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    fixed lv_facing;

    // Automatic Variable Declarations
    unitgroup autoED4B8E0E_g;
    int autoED4B8E0E_u;
    unit autoED4B8E0E_var;
    unitgroup auto7676AA67_g;
    int auto7676AA67_u;
    unit auto7676AA67_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoED4B8E0E_g = UnitGroup("Hell_GiantDemon_Base", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED4B8E0E_u = UnitGroupCount(autoED4B8E0E_g, c_unitCountAll);
    for (;; autoED4B8E0E_u -= 1) {
        autoED4B8E0E_var = UnitGroupUnitFromEnd(autoED4B8E0E_g, autoED4B8E0E_u);
        if (autoED4B8E0E_var == null) { break; }
        lv_facing = UnitGetFacing(autoED4B8E0E_var);
        lv_position = UnitGetPosition(autoED4B8E0E_var);
        UnitRemove(autoED4B8E0E_var);
    }
    UnitCreate(1, "Hell_GiantDemon_Base", 0, libCore_gv_cOMPUTER_TeamOrder, lv_position, lv_facing, null);
    libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C] = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Order");
    UnitCreate(1, "Hell_GiantDemon_Base", 0, libCore_gv_cOMPUTER_TeamChaos, lv_position, lv_facing, null);
    libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C] = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Chaos");
    auto7676AA67_g = UnitGroup("Hell_GiantDemon_Chains", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7676AA67_u = UnitGroupCount(auto7676AA67_g, c_unitCountAll);
    for (;; auto7676AA67_u -= 1) {
        auto7676AA67_var = UnitGroupUnitFromEnd(auto7676AA67_g, auto7676AA67_u);
        if (auto7676AA67_var == null) { break; }
        lv_facing = UnitGetFacing(auto7676AA67_var);
        lv_position = UnitGetPosition(auto7676AA67_var);
        UnitRemove(auto7676AA67_var);
    }
    UnitCreate(1, "Hell_GiantDemon_Chains", 0, libCore_gv_cOMPUTER_TeamOrder, lv_position, lv_facing, null);
    libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C] = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Order");
    UnitCreate(1, "Hell_GiantDemon_Chains", 0, libCore_gv_cOMPUTER_TeamChaos, lv_position, lv_facing, null);
    libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C] = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Chaos");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGiantDemons_Init () {
    gt_CreateGiantDemons = TriggerCreate("gt_CreateGiantDemons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demon Lookat and Reaction
//--------------------------------------------------------------------------------------------------
bool gt_DemonLookatandReaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newLookAtTarget;

    // Automatic Variable Declarations
    region auto738310DE_val;
    int auto2DEFFBEC_val;
    int autoBFFC62AB_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto738310DE_val = EventUnitRegion();
    if (auto738310DE_val == RegionFromId(6)) {
        auto2DEFFBEC_val = libGame_gf_TeamNumberOfPlayer(EventPlayer());
        if (auto2DEFFBEC_val == libGame_gv_teamOrderIndex_C) {
            if ((gv_demonBaseResetting[1] == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
                    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C]), "SlowHeadOnlySubtle");
                    TimerStart(gv_demonBaseTimer[libGame_gv_teamOrderIndex_C], 8.0, false, c_timeGame);
                }
                else {
                    lv_newLookAtTarget = UnitGroupRandomUnit(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive);
                    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C]), "SlowHeadOnlySubtle", libNtve_gf_MainActorofUnit(lv_newLookAtTarget));
                    Wait(1.0, c_timeGame);
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 1)) {
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C], "Signal Begin");
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C], "StatusSet Looking 1");
                    }

                }
            }

        }
        else if (auto2DEFFBEC_val == libGame_gv_teamChaosIndex_C) {
            if ((gv_demonBaseResetting[2] == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
                    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C]), "SlowHeadOnlySubtle");
                    TimerStart(gv_demonBaseTimer[libGame_gv_teamChaosIndex_C], 8.0, false, c_timeGame);
                }
                else {
                    lv_newLookAtTarget = UnitGroupRandomUnit(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive);
                    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C]), "SlowHeadOnlySubtle", libNtve_gf_MainActorofUnit(lv_newLookAtTarget));
                    Wait(1.0, c_timeGame);
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 1)) {
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C], "Signal Begin");
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C], "StatusSet Looking 1");
                    }

                }
            }

        }
        else {
        }
    }
    else if (auto738310DE_val == RegionFromId(3)) {
        autoBFFC62AB_val = libGame_gf_TeamNumberOfPlayer(EventPlayer());
        if (autoBFFC62AB_val == libGame_gv_teamOrderIndex_C) {
            if ((gv_demonChainsResetting[1] == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
                    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C]), "SlowHeadOnlySubtle");
                    TimerStart(gv_demonChainsTimer[libGame_gv_teamOrderIndex_C], 8.0, false, c_timeGame);
                }
                else {
                    lv_newLookAtTarget = UnitGroupRandomUnit(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive);
                    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C]), "SlowHeadOnlySubtle", libNtve_gf_MainActorofUnit(lv_newLookAtTarget));
                    Wait(1.0, c_timeGame);
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 1)) {
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C], "Signal Begin");
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C], "StatusSet Looking 1");
                    }

                }
            }

        }
        else if (autoBFFC62AB_val == libGame_gv_teamChaosIndex_C) {
            if ((gv_demonChainsResetting[2] == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
                    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C]), "SlowHeadOnlySubtle");
                    TimerStart(gv_demonChainsTimer[libGame_gv_teamChaosIndex_C], 8.0, false, c_timeGame);
                }
                else {
                    lv_newLookAtTarget = UnitGroupRandomUnit(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive);
                    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C]), "SlowHeadOnlySubtle", libNtve_gf_MainActorofUnit(lv_newLookAtTarget));
                    Wait(1.0, c_timeGame);
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, EventUnitRegion(), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 1)) {
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C], "Signal Begin");
                        libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C], "StatusSet Looking 1");
                    }

                }
            }

        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemonLookatandReaction_Init () {
    gt_DemonLookatandReaction = TriggerCreate("gt_DemonLookatandReaction_Func");
    TriggerAddEventUnitRegion(gt_DemonLookatandReaction, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_DemonLookatandReaction, null, RegionFromId(6), false);
    TriggerAddEventUnitRegion(gt_DemonLookatandReaction, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_DemonLookatandReaction, null, RegionFromId(3), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demon Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_DemonTimerExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto0DDC11F9_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0DDC11F9_val = EventTimer();
    if (auto0DDC11F9_val == gv_demonBaseTimer[libGame_gv_teamOrderIndex_C]) {
        if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionFromId(6), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
            gv_demonBaseResetting[libGame_gv_teamOrderIndex_C] = true;
            libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamOrderIndex_C], "Signal End");
            TimerStart(gv_demonBaseResetTimer[libGame_gv_teamOrderIndex_C], 10.0, false, c_timeGame);
        }
        else {
            TimerStart(gv_demonBaseTimer[libGame_gv_teamOrderIndex_C], 8.0, false, c_timeGame);
        }
    }
    else if (auto0DDC11F9_val == gv_demonChainsTimer[libGame_gv_teamOrderIndex_C]) {
        if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionFromId(3), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
            gv_demonChainsResetting[libGame_gv_teamOrderIndex_C] = true;
            libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamOrderIndex_C], "Signal End");
            TimerStart(gv_demonChainsResetTimer[libGame_gv_teamOrderIndex_C], 10.0, false, c_timeGame);
        }
        else {
            TimerStart(gv_demonChainsTimer[libGame_gv_teamOrderIndex_C], 8.0, false, c_timeGame);
        }
    }
    else if (auto0DDC11F9_val == gv_demonBaseTimer[libGame_gv_teamChaosIndex_C]) {
        if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, RegionFromId(6), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
            gv_demonBaseResetting[libGame_gv_teamChaosIndex_C] = true;
            libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsBase[libGame_gv_teamChaosIndex_C], "Signal End");
            TimerStart(gv_demonBaseResetTimer[libGame_gv_teamChaosIndex_C], 10.0, false, c_timeGame);
        }
        else {
            TimerStart(gv_demonBaseTimer[libGame_gv_teamChaosIndex_C], 8.0, false, c_timeGame);
        }
    }
    else if (auto0DDC11F9_val == gv_demonChainsTimer[libGame_gv_teamChaosIndex_C]) {
        if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, RegionFromId(3), libCore_gv_filtersHeroic, 0), c_unitCountAlive) == 0)) {
            gv_demonChainsResetting[libGame_gv_teamChaosIndex_C] = true;
            libNtve_gf_SendActorMessageToUnit(libMLHH_gv_hHDemonGiantsChains[libGame_gv_teamChaosIndex_C], "Signal End");
            TimerStart(gv_demonChainsResetTimer[libGame_gv_teamChaosIndex_C], 10.0, false, c_timeGame);
        }
        else {
            TimerStart(gv_demonChainsTimer[libGame_gv_teamChaosIndex_C], 8.0, false, c_timeGame);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemonTimerExpired_Init () {
    gt_DemonTimerExpired = TriggerCreate("gt_DemonTimerExpired_Func");
    TriggerAddEventTimer(gt_DemonTimerExpired, gv_demonBaseTimer[1]);
    TriggerAddEventTimer(gt_DemonTimerExpired, gv_demonBaseTimer[2]);
    TriggerAddEventTimer(gt_DemonTimerExpired, gv_demonChainsTimer[1]);
    TriggerAddEventTimer(gt_DemonTimerExpired, gv_demonChainsTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demon Reset Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_DemonResetTimerExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto5E7A89AD_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5E7A89AD_val = EventTimer();
    if (auto5E7A89AD_val == gv_demonBaseResetTimer[libGame_gv_teamOrderIndex_C]) {
        gv_demonBaseResetting[libGame_gv_teamOrderIndex_C] = false;
    }
    else if (auto5E7A89AD_val == gv_demonBaseResetTimer[libGame_gv_teamChaosIndex_C]) {
        gv_demonBaseResetting[libGame_gv_teamChaosIndex_C] = false;
    }
    else if (auto5E7A89AD_val == gv_demonChainsResetTimer[libGame_gv_teamOrderIndex_C]) {
        gv_demonChainsResetting[libGame_gv_teamOrderIndex_C] = false;
    }
    else if (auto5E7A89AD_val == gv_demonChainsResetTimer[libGame_gv_teamChaosIndex_C]) {
        gv_demonChainsResetting[libGame_gv_teamChaosIndex_C] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemonResetTimerExpired_Init () {
    gt_DemonResetTimerExpired = TriggerCreate("gt_DemonResetTimerExpired_Func");
    TriggerAddEventTimer(gt_DemonResetTimerExpired, gv_demonBaseResetTimer[1]);
    TriggerAddEventTimer(gt_DemonResetTimerExpired, gv_demonBaseResetTimer[2]);
    TriggerAddEventTimer(gt_DemonResetTimerExpired, gv_demonChainsResetTimer[1]);
    TriggerAddEventTimer(gt_DemonResetTimerExpired, gv_demonChainsResetTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeMap_Init();
    gt_InitializeMapMechanic_Init();
    gt_MapMechanicIntroCallback_Init();
    gt_HookupGlobalVariables_Init();
    gt_HookupLaneData_Init();
    gt_HookupJungleCreepData_Init();
    gt_HookupTownData_Init();
    gt_HookupRegionData_Init();
    gt_CreateGiantDemons_Init();
    gt_DemonLookatandReaction_Init();
    gt_DemonTimerExpired_Init();
    gt_DemonResetTimerExpired_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
